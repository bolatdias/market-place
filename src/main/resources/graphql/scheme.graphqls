scalar Date

type Query {
    checkUsernameAvailability(username: String): Boolean
    checkEmailAvailability(email:String) : Boolean
    getCurrentUser:User
    getAccessToken(usernameOrEmail:String!, password:String!):Token


    products:[Product]
    product(id:ID!):Product
    searchProducts(input:SearchProductInput):[Product]

    categories:[Category]
    category(id:ID!):Category

    cart:Cart
}

type Mutation {
    createUser(input: CreateUserInput!): UserPayload
    rateProduct(input:ProductRatingInput):ProductRating
    addProductToCart(input:AddToCartInput):CartProduct
    cleanCart:ApiResponse
    createOrder(input:CreateOrderInput):Order
    createProduct(input: CreateProductInput!): Product
    createCompany(input:CreateCompanyInput): UserPayload
}

type Order implements DateAudit{
    id:ID!
    user:User
    orderProducts:[OrderProduct]
    address:String
    createdAt:Date
    updatedAt:Date
}

type OrderProduct {
    id:ID!
    order:Order
    product:Product
    quantity:Int
}

type Product{
    id:ID!
    title:String
    description: String
    price: Int
    category: Category
    company:Company
    stock: Int
    images:[Image]
    productRatings:[ProductRating]
    rating:Float

    ratingByUser:Int
}

type CartProduct {
    id:ID!
    product:Product
    cart:Cart
    quantity:Int
}

input ProductRatingInput{
    rating:Int
    comment:String
    productId:Int
}
input CreateOrderInput{
    address:String
}

input SearchProductInput{
    query:String
}

input CreateProductInput{
    title:String
    description: String
    price: Int
    category: Int
    brand:String
    stock: Int
}

type ProductRating implements DateAudit{
    rating:Int
    comment:String
    user:User
    product:Product
    createdAt: Date
    updatedAt: Date
}

type Category{
    id:ID!
    title:String
    products:[Product]
}
type Image{
    id:ID!
    url:String
    product:Product
}
type Token{
    tokenType:String!
    accessToken:String!
}



type UserPayload{
    message:String
    user:User
}

type PurchasePayload{
    message:String
}

type ApiResponse{
    success:Boolean
    message:String
}
input CreateUserInput{
    name:String
    username:String!
    email:String!
    password:String!
}
input AddToCartInput{
    productId:Int
    quantity:Int
}
input CreateCompanyInput {
    address: String!
    name: String!
    username: String!
    password: String!
    email: String!
}


type User implements DateAudit{
    id:ID!
    name:String
    username:String!
    email:String!
    roles:[Role]
    cart:Cart
    productRatings:[ProductRating]
    createdAt: Date
    updatedAt: Date
}

type Cart{
    totalPrice:Int
    cartProducts:[CartProduct]
    user:User
}

type Company{
    id:ID!
    user:User
    name:String
    address:String
    products:[Product]
}

type Role{
    id:ID!
    name:RoleName
}

enum RoleName{
    ROLE_USER
    ROLE_ADMIN
}


interface DateAudit{
    createdAt:Date
    updatedAt:Date
}


schema{
    query: Query
    mutation: Mutation
}