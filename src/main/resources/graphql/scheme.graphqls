scalar Date

type Query {
    checkUsernameAvailability(username: String): Boolean
    checkEmailAvailability(email:String) : Boolean
    getCurrentUser:User
    getAccessToken(usernameOrEmail:String!, password:String!):Token



    products:[Product]
    product(id:ID!):Product

    categories:[Category]
    category(id:ID!):Category
}

type Mutation {
    createUser(input: CreateUserInput!): CreateUserPayload
    rateProduct(input:ProductRatingInput):ProductRating
}

type Product{
    id:ID!
    title:String
    description: String
    price: Int
    category: Category
    brand:String
    stock: Int
    images:[Image]
}

input ProductRatingInput{
    rating:Int
    comment:String
    productId:Int
}

type ProductRating{
    rating:Int
    comment:String
    user:User
    product:Product
}

type Category{
    id:ID!
    title:String
    products:[Product]
}
type Image{
    id:ID!
    url:String
    product:Product
}
type Token{
    tokenType:String!
    accessToken:String!
}



type CreateUserPayload{
    user:User
}


input CreateUserInput{
    name:String
    username:String!
    email:String!
    password:String!
}

type User{
    id:ID!
    name:String
    username:String!
    email:String!
    roles:[Role]
    createdAt: Date
    updatedAt: Date
}
type Role{
    id:ID!
    name:RoleName
}

enum RoleName{
    ROLE_USER
    ROLE_ADMIN
}



schema{
    query: Query
    mutation: Mutation
}